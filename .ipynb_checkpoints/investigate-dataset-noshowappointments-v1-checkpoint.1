{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project: Investigation of dataset No-show Appointments\n",
    "\n",
    "## Table of Contents\n",
    "<ul>\n",
    "<li><a href=\"#intro\">Introduction</a></li>\n",
    "<li><a href=\"#wrangling\">Data Wrangling</a></li>\n",
    "<li><a href=\"#eda\">Exploratory Data Analysis</a></li>\n",
    "<li><a href=\"#conclusions\">Conclusions</a></li>\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='intro'></a>\n",
    "## Introduction\n",
    "\n",
    "In this project we have chosen to investigate a No-show Appointments dataset. The dataset contains information collected from some 110,000 medical appointments in Brazil. Around 20 percent of patients do not show up for their appointment (marked as No-show in the dataset). We wish to know why this happens so frequently, and so our main focus will be on No-shows - our _dependent_ variable. Luckily we have a number of factors that may help us in finding out what affects whether a patient does not turn up for his/her appointment. Hence, these factors are our _independent_ variables. They are:\n",
    "\n",
    "*    ‘scheduled_day’ tells us on what day the patient set up their appointment.\n",
    "*    ‘appointment_day’ tells us the date of the appointment.\n",
    "*    ‘age’ tells us the age of the patient.\n",
    "*    ‘neighborhood’ tells us the location of the hospital.\n",
    "*    ‘scholarship’ indicates whether or not the patient is enrolled in Brasilian welfare program [Bolsa Família](https://en.wikipedia.org/wiki/Bolsa_Fam%C3%ADlia \"Read more about Bolsa Familia at Wikipedia\").\n",
    "*    ‘hypertension’ indicates whether or not the patient suffers from hypertension.\n",
    "*    ‘diabetes’ indicates whether or not the patient is diagnosed with diabetes.\n",
    "*    ‘alcoholism’ indicates whether or not the patient is diagnosed with alcoholism.\n",
    "*    ‘handicap’ indicates whether or not the patient is diagnosed with any handicap.\n",
    "*    ‘sms_received’ indicates whether or not the patient has received sms reminder.\n",
    "\n",
    "We will add a few calculated columns as well:\n",
    "*    ‘day_of_appointment’ tells us whether the appointment time was on a Monday, Tuesday etc.\n",
    "*    ‘sch_days_inadv’ tells us how many days in advance the appointment had been scheduled.\n",
    "*    ‘sch_sameday’ indicates whether or not the patient scheduled the appointment the same day as the appointment itself.\n",
    "*    ‘gender_is_woman’ indicates whether the patient is a woman. If it is False, it means the patient is a man.\n",
    "*    ‘handicap_bool’ indicates whether a patient has any handicap or not.\n",
    "\n",
    "After our investigation we will conclude with answers to the following questions:\n",
    "\n",
    "*    What factors are important for us to know in order to predict if a patient will show up for their scheduled appointment? Does sms-reminders work?\n",
    "*    Is there any correlation between age of the patient and how far ahead the appointment was scheduled?\n",
    "*    Is there a day of the week when the age distribution of the patients is different?\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='wrangling'></a>\n",
    "## Data Wrangling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### General Properties"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, let us import the packages that we need"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And we set a max limit on the number of rows we wish to display as output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_rows', 17)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we load the data and have a look at the first few rows of our dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PatientId</th>\n",
       "      <th>AppointmentID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>ScheduledDay</th>\n",
       "      <th>AppointmentDay</th>\n",
       "      <th>Age</th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Scholarship</th>\n",
       "      <th>Hipertension</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Alcoholism</th>\n",
       "      <th>Handcap</th>\n",
       "      <th>SMS_received</th>\n",
       "      <th>No-show</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.987250e+13</td>\n",
       "      <td>5642903</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T18:38:08Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>62</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.589978e+14</td>\n",
       "      <td>5642503</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-04-29T16:08:27Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.262962e+12</td>\n",
       "      <td>5642549</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T16:19:04Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>62</td>\n",
       "      <td>MATA DA PRAIA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.679512e+11</td>\n",
       "      <td>5642828</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T17:29:31Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>8</td>\n",
       "      <td>PONTAL DE CAMBURI</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.841186e+12</td>\n",
       "      <td>5642494</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T16:07:23Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      PatientId  AppointmentID Gender          ScheduledDay  \\\n",
       "0  2.987250e+13        5642903      F  2016-04-29T18:38:08Z   \n",
       "1  5.589978e+14        5642503      M  2016-04-29T16:08:27Z   \n",
       "2  4.262962e+12        5642549      F  2016-04-29T16:19:04Z   \n",
       "3  8.679512e+11        5642828      F  2016-04-29T17:29:31Z   \n",
       "4  8.841186e+12        5642494      F  2016-04-29T16:07:23Z   \n",
       "\n",
       "         AppointmentDay  Age      Neighbourhood  Scholarship  Hipertension  \\\n",
       "0  2016-04-29T00:00:00Z   62    JARDIM DA PENHA            0             1   \n",
       "1  2016-04-29T00:00:00Z   56    JARDIM DA PENHA            0             0   \n",
       "2  2016-04-29T00:00:00Z   62      MATA DA PRAIA            0             0   \n",
       "3  2016-04-29T00:00:00Z    8  PONTAL DE CAMBURI            0             0   \n",
       "4  2016-04-29T00:00:00Z   56    JARDIM DA PENHA            0             1   \n",
       "\n",
       "   Diabetes  Alcoholism  Handcap  SMS_received No-show  \n",
       "0         0           0        0             0      No  \n",
       "1         0           0        0             0      No  \n",
       "2         0           0        0             0      No  \n",
       "3         0           0        0             0      No  \n",
       "4         1           0        0             0      No  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('noshowappointments-kagglev2-may-2016.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At first glance it looks like we should correct some typos in the headings and probably streamline the formatting.\n",
    "\n",
    "Now let us get an overview of the data and data types:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 110527 entries, 0 to 110526\n",
      "Data columns (total 14 columns):\n",
      "PatientId         110527 non-null float64\n",
      "AppointmentID     110527 non-null int64\n",
      "Gender            110527 non-null object\n",
      "ScheduledDay      110527 non-null object\n",
      "AppointmentDay    110527 non-null object\n",
      "Age               110527 non-null int64\n",
      "Neighbourhood     110527 non-null object\n",
      "Scholarship       110527 non-null int64\n",
      "Hipertension      110527 non-null int64\n",
      "Diabetes          110527 non-null int64\n",
      "Alcoholism        110527 non-null int64\n",
      "Handcap           110527 non-null int64\n",
      "SMS_received      110527 non-null int64\n",
      "No-show           110527 non-null object\n",
      "dtypes: float64(1), int64(8), object(5)\n",
      "memory usage: 11.8+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df['Gender'][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df['ScheduledDay'][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df['AppointmentDay'][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df['Neighbourhood'][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df['No-show'][0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need to fix some of the data types. PatientID probably should not be a float but rather a string. AppointmentID could also be a string. For Gender we could rather use the category data type. ScheduledDay and AppointmentDay should be changed to datetime. Hypertension, Diabetes, Alcoholism, Handicap, SMS_received, No-show all sound like they could be boolean.\n",
    "\n",
    "Now, let us see how many unique values are in each column:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PatientId          62299\n",
       "AppointmentID     110527\n",
       "Gender                 2\n",
       "ScheduledDay      103549\n",
       "AppointmentDay        27\n",
       "Age                  104\n",
       "Neighbourhood         81\n",
       "Scholarship            2\n",
       "Hipertension           2\n",
       "Diabetes               2\n",
       "Alcoholism             2\n",
       "Handcap                5\n",
       "SMS_received           2\n",
       "No-show                2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We observe that the number of unique AppointmentIDs is 110,527, the same as the total number of entries. This means, as one would expect, that each recorded appointment has a unique ID.\n",
    "\n",
    "Hypertension, Diabetes, Alcoholism, SMS_received and No-show still appear like they could be transformed to boolean format.\n",
    "\n",
    "Handicap, however, have 5 different values. Let us have a closer look:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PatientId</th>\n",
       "      <th>AppointmentID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>ScheduledDay</th>\n",
       "      <th>AppointmentDay</th>\n",
       "      <th>Age</th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Scholarship</th>\n",
       "      <th>Hipertension</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Alcoholism</th>\n",
       "      <th>SMS_received</th>\n",
       "      <th>No-show</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Handcap</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>108286</td>\n",
       "      <td>108286</td>\n",
       "      <td>108286</td>\n",
       "      <td>108286</td>\n",
       "      <td>108286</td>\n",
       "      <td>108286</td>\n",
       "      <td>108286</td>\n",
       "      <td>108286</td>\n",
       "      <td>108286</td>\n",
       "      <td>108286</td>\n",
       "      <td>108286</td>\n",
       "      <td>108286</td>\n",
       "      <td>108286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2042</td>\n",
       "      <td>2042</td>\n",
       "      <td>2042</td>\n",
       "      <td>2042</td>\n",
       "      <td>2042</td>\n",
       "      <td>2042</td>\n",
       "      <td>2042</td>\n",
       "      <td>2042</td>\n",
       "      <td>2042</td>\n",
       "      <td>2042</td>\n",
       "      <td>2042</td>\n",
       "      <td>2042</td>\n",
       "      <td>2042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>183</td>\n",
       "      <td>183</td>\n",
       "      <td>183</td>\n",
       "      <td>183</td>\n",
       "      <td>183</td>\n",
       "      <td>183</td>\n",
       "      <td>183</td>\n",
       "      <td>183</td>\n",
       "      <td>183</td>\n",
       "      <td>183</td>\n",
       "      <td>183</td>\n",
       "      <td>183</td>\n",
       "      <td>183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         PatientId  AppointmentID  Gender  ScheduledDay  AppointmentDay  \\\n",
       "Handcap                                                                   \n",
       "0           108286         108286  108286        108286          108286   \n",
       "1             2042           2042    2042          2042            2042   \n",
       "2              183            183     183           183             183   \n",
       "3               13             13      13            13              13   \n",
       "4                3              3       3             3               3   \n",
       "\n",
       "            Age  Neighbourhood  Scholarship  Hipertension  Diabetes  \\\n",
       "Handcap                                                               \n",
       "0        108286         108286       108286        108286    108286   \n",
       "1          2042           2042         2042          2042      2042   \n",
       "2           183            183          183           183       183   \n",
       "3            13             13           13            13        13   \n",
       "4             3              3            3             3         3   \n",
       "\n",
       "         Alcoholism  SMS_received  No-show  \n",
       "Handcap                                     \n",
       "0            108286        108286   108286  \n",
       "1              2042          2042     2042  \n",
       "2               183           183      183  \n",
       "3                13            13       13  \n",
       "4                 3             3        3  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('Handcap').count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What do these 5 values (0, 1, 2, 3, 4) mean? Some digging in discussion thread at Kaggle yielded an answer. There the creator of the dataset confirms: \"... the handcap refers to the number of disabilites a person has. For example, if the person is blind and can't walk the total is 2.\" To simplify we can consider converting this to a boolean; True: any handicap, False: no handicap.\n",
    "\n",
    "Next, let us check for duplicates:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(df.duplicated())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our dataset does not contain any duplicates.\n",
    "\n",
    "Now let us see if there are any missing data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PatientId         0\n",
       "AppointmentID     0\n",
       "Gender            0\n",
       "ScheduledDay      0\n",
       "AppointmentDay    0\n",
       "Age               0\n",
       "Neighbourhood     0\n",
       "Scholarship       0\n",
       "Hipertension      0\n",
       "Diabetes          0\n",
       "Alcoholism        0\n",
       "Handcap           0\n",
       "SMS_received      0\n",
       "No-show           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our dataset does not contain missing data.\n",
    "\n",
    "Next, let us see if there are any outliers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PatientId</th>\n",
       "      <th>AppointmentID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Scholarship</th>\n",
       "      <th>Hipertension</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Alcoholism</th>\n",
       "      <th>Handcap</th>\n",
       "      <th>SMS_received</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.105270e+05</td>\n",
       "      <td>1.105270e+05</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.474963e+14</td>\n",
       "      <td>5.675305e+06</td>\n",
       "      <td>37.088874</td>\n",
       "      <td>0.098266</td>\n",
       "      <td>0.197246</td>\n",
       "      <td>0.071865</td>\n",
       "      <td>0.030400</td>\n",
       "      <td>0.022248</td>\n",
       "      <td>0.321026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.560949e+14</td>\n",
       "      <td>7.129575e+04</td>\n",
       "      <td>23.110205</td>\n",
       "      <td>0.297675</td>\n",
       "      <td>0.397921</td>\n",
       "      <td>0.258265</td>\n",
       "      <td>0.171686</td>\n",
       "      <td>0.161543</td>\n",
       "      <td>0.466873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.921784e+04</td>\n",
       "      <td>5.030230e+06</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.172614e+12</td>\n",
       "      <td>5.640286e+06</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.173184e+13</td>\n",
       "      <td>5.680573e+06</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.439172e+13</td>\n",
       "      <td>5.725524e+06</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.999816e+14</td>\n",
       "      <td>5.790484e+06</td>\n",
       "      <td>115.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          PatientId  AppointmentID            Age    Scholarship  \\\n",
       "count  1.105270e+05   1.105270e+05  110527.000000  110527.000000   \n",
       "mean   1.474963e+14   5.675305e+06      37.088874       0.098266   \n",
       "std    2.560949e+14   7.129575e+04      23.110205       0.297675   \n",
       "min    3.921784e+04   5.030230e+06      -1.000000       0.000000   \n",
       "25%    4.172614e+12   5.640286e+06      18.000000       0.000000   \n",
       "50%    3.173184e+13   5.680573e+06      37.000000       0.000000   \n",
       "75%    9.439172e+13   5.725524e+06      55.000000       0.000000   \n",
       "max    9.999816e+14   5.790484e+06     115.000000       1.000000   \n",
       "\n",
       "        Hipertension       Diabetes     Alcoholism        Handcap  \\\n",
       "count  110527.000000  110527.000000  110527.000000  110527.000000   \n",
       "mean        0.197246       0.071865       0.030400       0.022248   \n",
       "std         0.397921       0.258265       0.171686       0.161543   \n",
       "min         0.000000       0.000000       0.000000       0.000000   \n",
       "25%         0.000000       0.000000       0.000000       0.000000   \n",
       "50%         0.000000       0.000000       0.000000       0.000000   \n",
       "75%         0.000000       0.000000       0.000000       0.000000   \n",
       "max         1.000000       1.000000       1.000000       4.000000   \n",
       "\n",
       "        SMS_received  \n",
       "count  110527.000000  \n",
       "mean        0.321026  \n",
       "std         0.466873  \n",
       "min         0.000000  \n",
       "25%         0.000000  \n",
       "50%         0.000000  \n",
       "75%         1.000000  \n",
       "max         1.000000  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that the average age among patients is 37 years, and the ages are in the range from -1 to 115 years. Seems like we have at least one outlier with -1 that we need to deal with.\n",
    "\n",
    "We can also see from the mean of each boolean value what their ratio of occurrence is: Scholarship (9.8 %), Hypertension (19.7 %), Diabetes (7.2 %), Alcoholism (3.0 %), SMS_received (32.1 %)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The distribution of ages are as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PatientId</th>\n",
       "      <th>AppointmentID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>ScheduledDay</th>\n",
       "      <th>AppointmentDay</th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Scholarship</th>\n",
       "      <th>Hipertension</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Alcoholism</th>\n",
       "      <th>Handcap</th>\n",
       "      <th>SMS_received</th>\n",
       "      <th>No-show</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>-1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3539</td>\n",
       "      <td>3539</td>\n",
       "      <td>3539</td>\n",
       "      <td>3539</td>\n",
       "      <td>3539</td>\n",
       "      <td>3539</td>\n",
       "      <td>3539</td>\n",
       "      <td>3539</td>\n",
       "      <td>3539</td>\n",
       "      <td>3539</td>\n",
       "      <td>3539</td>\n",
       "      <td>3539</td>\n",
       "      <td>3539</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2273</td>\n",
       "      <td>2273</td>\n",
       "      <td>2273</td>\n",
       "      <td>2273</td>\n",
       "      <td>2273</td>\n",
       "      <td>2273</td>\n",
       "      <td>2273</td>\n",
       "      <td>2273</td>\n",
       "      <td>2273</td>\n",
       "      <td>2273</td>\n",
       "      <td>2273</td>\n",
       "      <td>2273</td>\n",
       "      <td>2273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1618</td>\n",
       "      <td>1618</td>\n",
       "      <td>1618</td>\n",
       "      <td>1618</td>\n",
       "      <td>1618</td>\n",
       "      <td>1618</td>\n",
       "      <td>1618</td>\n",
       "      <td>1618</td>\n",
       "      <td>1618</td>\n",
       "      <td>1618</td>\n",
       "      <td>1618</td>\n",
       "      <td>1618</td>\n",
       "      <td>1618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1513</td>\n",
       "      <td>1513</td>\n",
       "      <td>1513</td>\n",
       "      <td>1513</td>\n",
       "      <td>1513</td>\n",
       "      <td>1513</td>\n",
       "      <td>1513</td>\n",
       "      <td>1513</td>\n",
       "      <td>1513</td>\n",
       "      <td>1513</td>\n",
       "      <td>1513</td>\n",
       "      <td>1513</td>\n",
       "      <td>1513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1299</td>\n",
       "      <td>1299</td>\n",
       "      <td>1299</td>\n",
       "      <td>1299</td>\n",
       "      <td>1299</td>\n",
       "      <td>1299</td>\n",
       "      <td>1299</td>\n",
       "      <td>1299</td>\n",
       "      <td>1299</td>\n",
       "      <td>1299</td>\n",
       "      <td>1299</td>\n",
       "      <td>1299</td>\n",
       "      <td>1299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1489</td>\n",
       "      <td>1489</td>\n",
       "      <td>1489</td>\n",
       "      <td>1489</td>\n",
       "      <td>1489</td>\n",
       "      <td>1489</td>\n",
       "      <td>1489</td>\n",
       "      <td>1489</td>\n",
       "      <td>1489</td>\n",
       "      <td>1489</td>\n",
       "      <td>1489</td>\n",
       "      <td>1489</td>\n",
       "      <td>1489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1521</td>\n",
       "      <td>1521</td>\n",
       "      <td>1521</td>\n",
       "      <td>1521</td>\n",
       "      <td>1521</td>\n",
       "      <td>1521</td>\n",
       "      <td>1521</td>\n",
       "      <td>1521</td>\n",
       "      <td>1521</td>\n",
       "      <td>1521</td>\n",
       "      <td>1521</td>\n",
       "      <td>1521</td>\n",
       "      <td>1521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>104 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      PatientId  AppointmentID  Gender  ScheduledDay  AppointmentDay  \\\n",
       "Age                                                                    \n",
       "-1            1              1       1             1               1   \n",
       " 0         3539           3539    3539          3539            3539   \n",
       " 1         2273           2273    2273          2273            2273   \n",
       " 2         1618           1618    1618          1618            1618   \n",
       " 3         1513           1513    1513          1513            1513   \n",
       "...         ...            ...     ...           ...             ...   \n",
       " 98           6              6       6             6               6   \n",
       " 99           1              1       1             1               1   \n",
       " 100          4              4       4             4               4   \n",
       " 102          2              2       2             2               2   \n",
       " 115          5              5       5             5               5   \n",
       "\n",
       "      Neighbourhood  Scholarship  Hipertension  Diabetes  Alcoholism  Handcap  \\\n",
       "Age                                                                             \n",
       "-1                1            1             1         1           1        1   \n",
       " 0             3539         3539          3539      3539        3539     3539   \n",
       " 1             2273         2273          2273      2273        2273     2273   \n",
       " 2             1618         1618          1618      1618        1618     1618   \n",
       " 3             1513         1513          1513      1513        1513     1513   \n",
       "...             ...          ...           ...       ...         ...      ...   \n",
       " 98               6            6             6         6           6        6   \n",
       " 99               1            1             1         1           1        1   \n",
       " 100              4            4             4         4           4        4   \n",
       " 102              2            2             2         2           2        2   \n",
       " 115              5            5             5         5           5        5   \n",
       "\n",
       "      SMS_received  No-show  \n",
       "Age                          \n",
       "-1               1        1  \n",
       " 0            3539     3539  \n",
       " 1            2273     2273  \n",
       " 2            1618     1618  \n",
       " 3            1513     1513  \n",
       "...            ...      ...  \n",
       " 98              6        6  \n",
       " 99              1        1  \n",
       " 100             4        4  \n",
       " 102             2        2  \n",
       " 115             5        5  \n",
       "\n",
       "[104 rows x 13 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('Age').count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that there is one person with age -1, which seems like an error, hence we will remove that outlier later. \n",
    "\n",
    "There is also something going on in the high end of the scale. Apart from the five(!) 115 year olds the highest age in our dataset is 102 years. Clearly, we can remove the 115 year outliers as well."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This concludes our initial inspection and observations of the dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on aforementioned observations we now perform the necessary steps to clean the data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We start with the headings, where we first streamline by converting to lowercase letters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.rename(columns=lambda x: x.strip().lower().replace(\"-\", \"_\"), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patientid</th>\n",
       "      <th>appointmentid</th>\n",
       "      <th>gender</th>\n",
       "      <th>scheduledday</th>\n",
       "      <th>appointmentday</th>\n",
       "      <th>age</th>\n",
       "      <th>neighbourhood</th>\n",
       "      <th>scholarship</th>\n",
       "      <th>hipertension</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>alcoholism</th>\n",
       "      <th>handcap</th>\n",
       "      <th>sms_received</th>\n",
       "      <th>no_show</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.987250e+13</td>\n",
       "      <td>5642903</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T18:38:08Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>62</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      patientid  appointmentid gender          scheduledday  \\\n",
       "0  2.987250e+13        5642903      F  2016-04-29T18:38:08Z   \n",
       "\n",
       "         appointmentday  age    neighbourhood  scholarship  hipertension  \\\n",
       "0  2016-04-29T00:00:00Z   62  JARDIM DA PENHA            0             1   \n",
       "\n",
       "   diabetes  alcoholism  handcap  sms_received no_show  \n",
       "0         0           0        0             0      No  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Better, but we also wish to correct typos and improve readability, so we do the following to rename some columns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patient_id</th>\n",
       "      <th>appointment_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>scheduled_day</th>\n",
       "      <th>appointment_day</th>\n",
       "      <th>age</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>scholarship</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>alcoholism</th>\n",
       "      <th>handicap</th>\n",
       "      <th>sms_received</th>\n",
       "      <th>no_show</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.987250e+13</td>\n",
       "      <td>5642903</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T18:38:08Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>62</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     patient_id  appointment_id gender         scheduled_day  \\\n",
       "0  2.987250e+13         5642903      F  2016-04-29T18:38:08Z   \n",
       "\n",
       "        appointment_day  age     neighborhood  scholarship  hypertension  \\\n",
       "0  2016-04-29T00:00:00Z   62  JARDIM DA PENHA            0             1   \n",
       "\n",
       "   diabetes  alcoholism  handicap  sms_received no_show  \n",
       "0         0           0         0             0      No  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.rename(columns={\"patientid\": \"patient_id\", \"appointmentid\": \"appointment_id\", \"scheduledday\": \"scheduled_day\", \"appointmentday\": \"appointment_day\", \"neighbourhood\": \"neighborhood\", \"hipertension\": \"hypertension\", \"handcap\": \"handicap\"},inplace=True)\n",
    "df.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now the headings look good. \n",
    "\n",
    "Next we need to fix the data types.\n",
    "\n",
    "We start by changing the type to integer for patient_id:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['patient_id'] = df['patient_id'].astype(np.int64).astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['appointment_id'] = df['appointment_id'].astype(str)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we change the type to category for gender:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['gender'] = df['gender'].astype('category')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We create a calculated column for 'day_of_appointment'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['day_of_appointment'] = pd.to_datetime(df['appointment_day']).dt.day_name()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We verify"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patient_id</th>\n",
       "      <th>appointment_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>scheduled_day</th>\n",
       "      <th>appointment_day</th>\n",
       "      <th>age</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>scholarship</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>alcoholism</th>\n",
       "      <th>handicap</th>\n",
       "      <th>sms_received</th>\n",
       "      <th>no_show</th>\n",
       "      <th>day_of_appointment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>29872499824296</td>\n",
       "      <td>5642903</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T18:38:08Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>62</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>558997776694438</td>\n",
       "      <td>5642503</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-04-29T16:08:27Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4262962299951</td>\n",
       "      <td>5642549</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T16:19:04Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>62</td>\n",
       "      <td>MATA DA PRAIA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>867951213174</td>\n",
       "      <td>5642828</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T17:29:31Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>8</td>\n",
       "      <td>PONTAL DE CAMBURI</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8841186448183</td>\n",
       "      <td>5642494</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T16:07:23Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        patient_id appointment_id gender         scheduled_day  \\\n",
       "0   29872499824296        5642903      F  2016-04-29T18:38:08Z   \n",
       "1  558997776694438        5642503      M  2016-04-29T16:08:27Z   \n",
       "2    4262962299951        5642549      F  2016-04-29T16:19:04Z   \n",
       "3     867951213174        5642828      F  2016-04-29T17:29:31Z   \n",
       "4    8841186448183        5642494      F  2016-04-29T16:07:23Z   \n",
       "\n",
       "        appointment_day  age       neighborhood  scholarship  hypertension  \\\n",
       "0  2016-04-29T00:00:00Z   62    JARDIM DA PENHA            0             1   \n",
       "1  2016-04-29T00:00:00Z   56    JARDIM DA PENHA            0             0   \n",
       "2  2016-04-29T00:00:00Z   62      MATA DA PRAIA            0             0   \n",
       "3  2016-04-29T00:00:00Z    8  PONTAL DE CAMBURI            0             0   \n",
       "4  2016-04-29T00:00:00Z   56    JARDIM DA PENHA            0             1   \n",
       "\n",
       "   diabetes  alcoholism  handicap  sms_received no_show day_of_appointment  \n",
       "0         0           0         0             0      No             Friday  \n",
       "1         0           0         0             0      No             Friday  \n",
       "2         0           0         0             0      No             Friday  \n",
       "3         0           0         0             0      No             Friday  \n",
       "4         1           0         0             0      No             Friday  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Indeed 'day_of_appointment' is added with seemingly correct values."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we change scheduled_day and appointment_day to datetime format:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['scheduled_day'] = pd.to_datetime(df['scheduled_day']).dt.date\n",
    "df['appointment_day'] = pd.to_datetime(df['appointment_day']).dt.date"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Further we change the data type for 'no-show' to boolean with applied mapping:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patient_id</th>\n",
       "      <th>appointment_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>scheduled_day</th>\n",
       "      <th>appointment_day</th>\n",
       "      <th>age</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>scholarship</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>alcoholism</th>\n",
       "      <th>handicap</th>\n",
       "      <th>sms_received</th>\n",
       "      <th>no_show</th>\n",
       "      <th>day_of_appointment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>29872499824296</td>\n",
       "      <td>5642903</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>62</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>558997776694438</td>\n",
       "      <td>5642503</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4262962299951</td>\n",
       "      <td>5642549</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>62</td>\n",
       "      <td>MATA DA PRAIA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>867951213174</td>\n",
       "      <td>5642828</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>8</td>\n",
       "      <td>PONTAL DE CAMBURI</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8841186448183</td>\n",
       "      <td>5642494</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        patient_id appointment_id gender scheduled_day appointment_day  age  \\\n",
       "0   29872499824296        5642903      F    2016-04-29      2016-04-29   62   \n",
       "1  558997776694438        5642503      M    2016-04-29      2016-04-29   56   \n",
       "2    4262962299951        5642549      F    2016-04-29      2016-04-29   62   \n",
       "3     867951213174        5642828      F    2016-04-29      2016-04-29    8   \n",
       "4    8841186448183        5642494      F    2016-04-29      2016-04-29   56   \n",
       "\n",
       "        neighborhood  scholarship  hypertension  diabetes  alcoholism  \\\n",
       "0    JARDIM DA PENHA            0             1         0           0   \n",
       "1    JARDIM DA PENHA            0             0         0           0   \n",
       "2      MATA DA PRAIA            0             0         0           0   \n",
       "3  PONTAL DE CAMBURI            0             0         0           0   \n",
       "4    JARDIM DA PENHA            0             1         1           0   \n",
       "\n",
       "   handicap  sms_received  no_show day_of_appointment  \n",
       "0         0             0    False             Friday  \n",
       "1         0             0    False             Friday  \n",
       "2         0             0    False             Friday  \n",
       "3         0             0    False             Friday  \n",
       "4         0             0    False             Friday  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mapping = {'Yes': True, 'No': False}\n",
    "df['no_show'] = df['no_show'].map(mapping)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, scholarship, hypertension, diabetes, alcoholism and sms_received can be changed to type boolean:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "columns_01 = ['scholarship', 'hypertension', 'diabetes', 'alcoholism', 'sms_received']\n",
    "mapping = {0: False, 1: True}\n",
    "for x in columns_01:\n",
    "    df[x] = df[x].map(mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patient_id</th>\n",
       "      <th>appointment_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>scheduled_day</th>\n",
       "      <th>appointment_day</th>\n",
       "      <th>age</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>scholarship</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>alcoholism</th>\n",
       "      <th>handicap</th>\n",
       "      <th>sms_received</th>\n",
       "      <th>no_show</th>\n",
       "      <th>day_of_appointment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>29872499824296</td>\n",
       "      <td>5642903</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>62</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>558997776694438</td>\n",
       "      <td>5642503</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4262962299951</td>\n",
       "      <td>5642549</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>62</td>\n",
       "      <td>MATA DA PRAIA</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>867951213174</td>\n",
       "      <td>5642828</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>8</td>\n",
       "      <td>PONTAL DE CAMBURI</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8841186448183</td>\n",
       "      <td>5642494</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        patient_id appointment_id gender scheduled_day appointment_day  age  \\\n",
       "0   29872499824296        5642903      F    2016-04-29      2016-04-29   62   \n",
       "1  558997776694438        5642503      M    2016-04-29      2016-04-29   56   \n",
       "2    4262962299951        5642549      F    2016-04-29      2016-04-29   62   \n",
       "3     867951213174        5642828      F    2016-04-29      2016-04-29    8   \n",
       "4    8841186448183        5642494      F    2016-04-29      2016-04-29   56   \n",
       "\n",
       "        neighborhood  scholarship  hypertension  diabetes  alcoholism  \\\n",
       "0    JARDIM DA PENHA        False          True     False       False   \n",
       "1    JARDIM DA PENHA        False         False     False       False   \n",
       "2      MATA DA PRAIA        False         False     False       False   \n",
       "3  PONTAL DE CAMBURI        False         False     False       False   \n",
       "4    JARDIM DA PENHA        False          True      True       False   \n",
       "\n",
       "   handicap  sms_received  no_show day_of_appointment  \n",
       "0         0         False    False             Friday  \n",
       "1         0         False    False             Friday  \n",
       "2         0         False    False             Friday  \n",
       "3         0         False    False             Friday  \n",
       "4         0         False    False             Friday  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Good, they have turned boolean - let us also check the datatypes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "patient_id              object\n",
       "appointment_id          object\n",
       "gender                category\n",
       "scheduled_day           object\n",
       "appointment_day         object\n",
       "age                      int64\n",
       "neighborhood            object\n",
       "scholarship               bool\n",
       "hypertension              bool\n",
       "diabetes                  bool\n",
       "alcoholism                bool\n",
       "handicap                 int64\n",
       "sms_received              bool\n",
       "no_show                   bool\n",
       "day_of_appointment      object\n",
       "dtype: object"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "They are indeed of boolean data type now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.date"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df['scheduled_day'][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.date"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df['appointment_day'][0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now our data types make much more sense in relation to the data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we will remove the outliers in the 'age' column. \n",
    "First, we create variables to hold the indexes of the extreme values; those under 0 years and those over 102 years."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "rem1 = df[df['age'] < 0].index\n",
    "rem2 = df[df['age'] > 102].index"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We then drop them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(rem1 , inplace=True)\n",
    "df.drop(rem2 , inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We verify the outliers have been removed:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>handicap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>110521.000000</td>\n",
       "      <td>110521.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>37.085694</td>\n",
       "      <td>0.022213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>23.104606</td>\n",
       "      <td>0.161440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>18.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>37.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>55.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>102.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 age       handicap\n",
       "count  110521.000000  110521.000000\n",
       "mean       37.085694       0.022213\n",
       "std        23.104606       0.161440\n",
       "min         0.000000       0.000000\n",
       "25%        18.000000       0.000000\n",
       "50%        37.000000       0.000000\n",
       "75%        55.000000       0.000000\n",
       "max       102.000000       4.000000"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Outliers were indeed removed, and the row count was reduced by six, as expected, to 110,521."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The minimum age is now 0 and the maximum age is 102."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding more columns and removing more outliers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before we dive into exploratory data analysis and our research questions, we will add some columns that may help us in exploring."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we add the time delta between scheduling and appointment as a new column 'sch_days_inadv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['sch_days_inadv'] = df['appointment_day'] - df['scheduled_day']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We verify there is a new column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patient_id</th>\n",
       "      <th>appointment_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>scheduled_day</th>\n",
       "      <th>appointment_day</th>\n",
       "      <th>age</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>scholarship</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>alcoholism</th>\n",
       "      <th>handicap</th>\n",
       "      <th>sms_received</th>\n",
       "      <th>no_show</th>\n",
       "      <th>day_of_appointment</th>\n",
       "      <th>sch_days_inadv</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>29872499824296</td>\n",
       "      <td>5642903</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>62</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "      <td>0 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>558997776694438</td>\n",
       "      <td>5642503</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "      <td>0 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4262962299951</td>\n",
       "      <td>5642549</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>62</td>\n",
       "      <td>MATA DA PRAIA</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "      <td>0 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>867951213174</td>\n",
       "      <td>5642828</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>8</td>\n",
       "      <td>PONTAL DE CAMBURI</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "      <td>0 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8841186448183</td>\n",
       "      <td>5642494</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "      <td>0 days</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        patient_id appointment_id gender scheduled_day appointment_day  age  \\\n",
       "0   29872499824296        5642903      F    2016-04-29      2016-04-29   62   \n",
       "1  558997776694438        5642503      M    2016-04-29      2016-04-29   56   \n",
       "2    4262962299951        5642549      F    2016-04-29      2016-04-29   62   \n",
       "3     867951213174        5642828      F    2016-04-29      2016-04-29    8   \n",
       "4    8841186448183        5642494      F    2016-04-29      2016-04-29   56   \n",
       "\n",
       "        neighborhood  scholarship  hypertension  diabetes  alcoholism  \\\n",
       "0    JARDIM DA PENHA        False          True     False       False   \n",
       "1    JARDIM DA PENHA        False         False     False       False   \n",
       "2      MATA DA PRAIA        False         False     False       False   \n",
       "3  PONTAL DE CAMBURI        False         False     False       False   \n",
       "4    JARDIM DA PENHA        False          True      True       False   \n",
       "\n",
       "   handicap  sms_received  no_show day_of_appointment sch_days_inadv  \n",
       "0         0         False    False             Friday         0 days  \n",
       "1         0         False    False             Friday         0 days  \n",
       "2         0         False    False             Friday         0 days  \n",
       "3         0         False    False             Friday         0 days  \n",
       "4         0         False    False             Friday         0 days  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The column 'sch_days_inadv' was indeed added. Let us extract the days from this timedelta which should give us data type 'integer' in this column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['sch_days_inadv'] = df['sch_days_inadv'].dt.days"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We also set it to type integer, to be sure, and verify"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "patient_id              object\n",
       "appointment_id          object\n",
       "gender                category\n",
       "scheduled_day           object\n",
       "appointment_day         object\n",
       "age                      int64\n",
       "neighborhood            object\n",
       "scholarship               bool\n",
       "hypertension              bool\n",
       "diabetes                  bool\n",
       "alcoholism                bool\n",
       "handicap                 int64\n",
       "sms_received              bool\n",
       "no_show                   bool\n",
       "day_of_appointment      object\n",
       "sch_days_inadv           int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.astype({'sch_days_inadv': np.int64}).dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the groupby() function to check out the distinct values in our new column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patient_id</th>\n",
       "      <th>appointment_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>scheduled_day</th>\n",
       "      <th>appointment_day</th>\n",
       "      <th>age</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>scholarship</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>alcoholism</th>\n",
       "      <th>handicap</th>\n",
       "      <th>sms_received</th>\n",
       "      <th>no_show</th>\n",
       "      <th>day_of_appointment</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sch_days_inadv</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>-6</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-1</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5213</td>\n",
       "      <td>5213</td>\n",
       "      <td>5213</td>\n",
       "      <td>5213</td>\n",
       "      <td>5213</td>\n",
       "      <td>5213</td>\n",
       "      <td>5213</td>\n",
       "      <td>5213</td>\n",
       "      <td>5213</td>\n",
       "      <td>5213</td>\n",
       "      <td>5213</td>\n",
       "      <td>5213</td>\n",
       "      <td>5213</td>\n",
       "      <td>5213</td>\n",
       "      <td>5213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6725</td>\n",
       "      <td>6725</td>\n",
       "      <td>6725</td>\n",
       "      <td>6725</td>\n",
       "      <td>6725</td>\n",
       "      <td>6725</td>\n",
       "      <td>6725</td>\n",
       "      <td>6725</td>\n",
       "      <td>6725</td>\n",
       "      <td>6725</td>\n",
       "      <td>6725</td>\n",
       "      <td>6725</td>\n",
       "      <td>6725</td>\n",
       "      <td>6725</td>\n",
       "      <td>6725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2735</td>\n",
       "      <td>2735</td>\n",
       "      <td>2735</td>\n",
       "      <td>2735</td>\n",
       "      <td>2735</td>\n",
       "      <td>2735</td>\n",
       "      <td>2735</td>\n",
       "      <td>2735</td>\n",
       "      <td>2735</td>\n",
       "      <td>2735</td>\n",
       "      <td>2735</td>\n",
       "      <td>2735</td>\n",
       "      <td>2735</td>\n",
       "      <td>2735</td>\n",
       "      <td>2735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5290</td>\n",
       "      <td>5290</td>\n",
       "      <td>5290</td>\n",
       "      <td>5290</td>\n",
       "      <td>5290</td>\n",
       "      <td>5290</td>\n",
       "      <td>5290</td>\n",
       "      <td>5290</td>\n",
       "      <td>5290</td>\n",
       "      <td>5290</td>\n",
       "      <td>5290</td>\n",
       "      <td>5290</td>\n",
       "      <td>5290</td>\n",
       "      <td>5290</td>\n",
       "      <td>5290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3277</td>\n",
       "      <td>3277</td>\n",
       "      <td>3277</td>\n",
       "      <td>3277</td>\n",
       "      <td>3277</td>\n",
       "      <td>3277</td>\n",
       "      <td>3277</td>\n",
       "      <td>3277</td>\n",
       "      <td>3277</td>\n",
       "      <td>3277</td>\n",
       "      <td>3277</td>\n",
       "      <td>3277</td>\n",
       "      <td>3277</td>\n",
       "      <td>3277</td>\n",
       "      <td>3277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142</th>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>162</th>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169</th>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>131 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                patient_id  appointment_id  gender  scheduled_day  \\\n",
       "sch_days_inadv                                                      \n",
       "-6                       1               1       1              1   \n",
       "-1                       4               4       4              4   \n",
       " 0                   38561           38561   38561          38561   \n",
       " 1                    5213            5213    5213           5213   \n",
       " 2                    6725            6725    6725           6725   \n",
       "...                    ...             ...     ...            ...   \n",
       " 155                    10              10      10             10   \n",
       " 162                    11              11      11             11   \n",
       " 169                     8               8       8              8   \n",
       " 176                    16              16      16             16   \n",
       " 179                    10              10      10             10   \n",
       "\n",
       "                appointment_day    age  neighborhood  scholarship  \\\n",
       "sch_days_inadv                                                      \n",
       "-6                            1      1             1            1   \n",
       "-1                            4      4             4            4   \n",
       " 0                        38561  38561         38561        38561   \n",
       " 1                         5213   5213          5213         5213   \n",
       " 2                         6725   6725          6725         6725   \n",
       "...                         ...    ...           ...          ...   \n",
       " 155                         10     10            10           10   \n",
       " 162                         11     11            11           11   \n",
       " 169                          8      8             8            8   \n",
       " 176                         16     16            16           16   \n",
       " 179                         10     10            10           10   \n",
       "\n",
       "                hypertension  diabetes  alcoholism  handicap  sms_received  \\\n",
       "sch_days_inadv                                                               \n",
       "-6                         1         1           1         1             1   \n",
       "-1                         4         4           4         4             4   \n",
       " 0                     38561     38561       38561     38561         38561   \n",
       " 1                      5213      5213        5213      5213          5213   \n",
       " 2                      6725      6725        6725      6725          6725   \n",
       "...                      ...       ...         ...       ...           ...   \n",
       " 155                      10        10          10        10            10   \n",
       " 162                      11        11          11        11            11   \n",
       " 169                       8         8           8         8             8   \n",
       " 176                      16        16          16        16            16   \n",
       " 179                      10        10          10        10            10   \n",
       "\n",
       "                no_show  day_of_appointment  \n",
       "sch_days_inadv                               \n",
       "-6                    1                   1  \n",
       "-1                    4                   4  \n",
       " 0                38561               38561  \n",
       " 1                 5213                5213  \n",
       " 2                 6725                6725  \n",
       "...                 ...                 ...  \n",
       " 155                 10                  10  \n",
       " 162                 11                  11  \n",
       " 169                  8                   8  \n",
       " 176                 16                  16  \n",
       " 179                 10                  10  \n",
       "\n",
       "[131 rows x 15 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('sch_days_inadv').count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Apparently we need to remove some outliers here as well, namely the negative values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "rem = df[df['sch_days_inadv'] < 0].index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(rem , inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We verify"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>handicap</th>\n",
       "      <th>sch_days_inadv</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>110516.000000</td>\n",
       "      <td>110516.000000</td>\n",
       "      <td>110516.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>37.085861</td>\n",
       "      <td>0.022196</td>\n",
       "      <td>10.184272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>23.104465</td>\n",
       "      <td>0.161390</td>\n",
       "      <td>15.255201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>18.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>37.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>55.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>15.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>102.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>179.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 age       handicap  sch_days_inadv\n",
       "count  110516.000000  110516.000000   110516.000000\n",
       "mean       37.085861       0.022196       10.184272\n",
       "std        23.104465       0.161390       15.255201\n",
       "min         0.000000       0.000000        0.000000\n",
       "25%        18.000000       0.000000        0.000000\n",
       "50%        37.000000       0.000000        4.000000\n",
       "75%        55.000000       0.000000       15.000000\n",
       "max       102.000000       4.000000      179.000000"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The negative values were indeed dropped. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To be able to address the question of whether a patient more frequently turns up at the appointments scheduled on the same day as the appointment itself we add a column 'sch_sameday' which will be boolean."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we add the column with all values as True (just as an initial step)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['sch_sameday'] = True"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we set the values to False whereever 'sch_days_inadv' is greater than zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[df.sch_days_inadv > 0, 'sch_sameday'] = False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We verify that boolean values are present in the column 'sch_sameday'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patient_id</th>\n",
       "      <th>appointment_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>scheduled_day</th>\n",
       "      <th>appointment_day</th>\n",
       "      <th>age</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>scholarship</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>alcoholism</th>\n",
       "      <th>handicap</th>\n",
       "      <th>sms_received</th>\n",
       "      <th>no_show</th>\n",
       "      <th>day_of_appointment</th>\n",
       "      <th>sch_days_inadv</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sch_sameday</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>False</th>\n",
       "      <td>71955</td>\n",
       "      <td>71955</td>\n",
       "      <td>71955</td>\n",
       "      <td>71955</td>\n",
       "      <td>71955</td>\n",
       "      <td>71955</td>\n",
       "      <td>71955</td>\n",
       "      <td>71955</td>\n",
       "      <td>71955</td>\n",
       "      <td>71955</td>\n",
       "      <td>71955</td>\n",
       "      <td>71955</td>\n",
       "      <td>71955</td>\n",
       "      <td>71955</td>\n",
       "      <td>71955</td>\n",
       "      <td>71955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "      <td>38561</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             patient_id  appointment_id  gender  scheduled_day  \\\n",
       "sch_sameday                                                      \n",
       "False             71955           71955   71955          71955   \n",
       "True              38561           38561   38561          38561   \n",
       "\n",
       "             appointment_day    age  neighborhood  scholarship  hypertension  \\\n",
       "sch_sameday                                                                    \n",
       "False                  71955  71955         71955        71955         71955   \n",
       "True                   38561  38561         38561        38561         38561   \n",
       "\n",
       "             diabetes  alcoholism  handicap  sms_received  no_show  \\\n",
       "sch_sameday                                                          \n",
       "False           71955       71955     71955         71955    71955   \n",
       "True            38561       38561     38561         38561    38561   \n",
       "\n",
       "             day_of_appointment  sch_days_inadv  \n",
       "sch_sameday                                      \n",
       "False                     71955           71955  \n",
       "True                      38561           38561  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('sch_sameday').count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The 'sch_sameday' column does indeed contain boolean values now, and we notice that a significant portion of the appointments were scheduled on the same day (a little more than one third)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we have so many boolean variables in our dataset, we will add two more boolean columns: \n",
    "*    One which indicates whether the patient is a woman. We will name this column 'gender_is_woman'.\n",
    "*    One which indicates whether or not a patient has any handicap. We name this column 'handicap_bool'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "mapping = {'F': True, 'M': False}\n",
    "df['gender_is_woman'] = df['gender'].map(mapping)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We verify that boolean values are present in the column 'gender_is_woman'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patient_id</th>\n",
       "      <th>appointment_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>scheduled_day</th>\n",
       "      <th>appointment_day</th>\n",
       "      <th>age</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>scholarship</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>alcoholism</th>\n",
       "      <th>handicap</th>\n",
       "      <th>sms_received</th>\n",
       "      <th>no_show</th>\n",
       "      <th>day_of_appointment</th>\n",
       "      <th>sch_days_inadv</th>\n",
       "      <th>sch_sameday</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender_is_woman</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <td>71831</td>\n",
       "      <td>71831</td>\n",
       "      <td>71831</td>\n",
       "      <td>71831</td>\n",
       "      <td>71831</td>\n",
       "      <td>71831</td>\n",
       "      <td>71831</td>\n",
       "      <td>71831</td>\n",
       "      <td>71831</td>\n",
       "      <td>71831</td>\n",
       "      <td>71831</td>\n",
       "      <td>71831</td>\n",
       "      <td>71831</td>\n",
       "      <td>71831</td>\n",
       "      <td>71831</td>\n",
       "      <td>71831</td>\n",
       "      <td>71831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>False</th>\n",
       "      <td>38685</td>\n",
       "      <td>38685</td>\n",
       "      <td>38685</td>\n",
       "      <td>38685</td>\n",
       "      <td>38685</td>\n",
       "      <td>38685</td>\n",
       "      <td>38685</td>\n",
       "      <td>38685</td>\n",
       "      <td>38685</td>\n",
       "      <td>38685</td>\n",
       "      <td>38685</td>\n",
       "      <td>38685</td>\n",
       "      <td>38685</td>\n",
       "      <td>38685</td>\n",
       "      <td>38685</td>\n",
       "      <td>38685</td>\n",
       "      <td>38685</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 patient_id  appointment_id  gender  scheduled_day  \\\n",
       "gender_is_woman                                                      \n",
       "True                  71831           71831   71831          71831   \n",
       "False                 38685           38685   38685          38685   \n",
       "\n",
       "                 appointment_day    age  neighborhood  scholarship  \\\n",
       "gender_is_woman                                                      \n",
       "True                       71831  71831         71831        71831   \n",
       "False                      38685  38685         38685        38685   \n",
       "\n",
       "                 hypertension  diabetes  alcoholism  handicap  sms_received  \\\n",
       "gender_is_woman                                                               \n",
       "True                    71831     71831       71831     71831         71831   \n",
       "False                   38685     38685       38685     38685         38685   \n",
       "\n",
       "                 no_show  day_of_appointment  sch_days_inadv  sch_sameday  \n",
       "gender_is_woman                                                            \n",
       "True               71831               71831           71831        71831  \n",
       "False              38685               38685           38685        38685  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('gender_is_woman').count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patient_id</th>\n",
       "      <th>appointment_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>scheduled_day</th>\n",
       "      <th>appointment_day</th>\n",
       "      <th>age</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>scholarship</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>alcoholism</th>\n",
       "      <th>handicap</th>\n",
       "      <th>sms_received</th>\n",
       "      <th>no_show</th>\n",
       "      <th>day_of_appointment</th>\n",
       "      <th>sch_days_inadv</th>\n",
       "      <th>sch_sameday</th>\n",
       "      <th>gender_is_woman</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>29872499824296</td>\n",
       "      <td>5642903</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>62</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>558997776694438</td>\n",
       "      <td>5642503</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4262962299951</td>\n",
       "      <td>5642549</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>62</td>\n",
       "      <td>MATA DA PRAIA</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>867951213174</td>\n",
       "      <td>5642828</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>8</td>\n",
       "      <td>PONTAL DE CAMBURI</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8841186448183</td>\n",
       "      <td>5642494</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>2016-04-29</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Friday</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        patient_id appointment_id gender scheduled_day appointment_day  age  \\\n",
       "0   29872499824296        5642903      F    2016-04-29      2016-04-29   62   \n",
       "1  558997776694438        5642503      M    2016-04-29      2016-04-29   56   \n",
       "2    4262962299951        5642549      F    2016-04-29      2016-04-29   62   \n",
       "3     867951213174        5642828      F    2016-04-29      2016-04-29    8   \n",
       "4    8841186448183        5642494      F    2016-04-29      2016-04-29   56   \n",
       "\n",
       "        neighborhood  scholarship  hypertension  diabetes  alcoholism  \\\n",
       "0    JARDIM DA PENHA        False          True     False       False   \n",
       "1    JARDIM DA PENHA        False         False     False       False   \n",
       "2      MATA DA PRAIA        False         False     False       False   \n",
       "3  PONTAL DE CAMBURI        False         False     False       False   \n",
       "4    JARDIM DA PENHA        False          True      True       False   \n",
       "\n",
       "   handicap  sms_received  no_show day_of_appointment  sch_days_inadv  \\\n",
       "0         0         False    False             Friday               0   \n",
       "1         0         False    False             Friday               0   \n",
       "2         0         False    False             Friday               0   \n",
       "3         0         False    False             Friday               0   \n",
       "4         0         False    False             Friday               0   \n",
       "\n",
       "   sch_sameday gender_is_woman  \n",
       "0         True            True  \n",
       "1         True           False  \n",
       "2         True            True  \n",
       "3         True            True  \n",
       "4         True            True  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we have so many boolean variables in our dataset, we will add column which will tell us whether or not a patient has any handicap. We name this column 'handicap_bool'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "mapping = {1: True, 2: True, 3: True, 4: True, 0: False}\n",
    "df['handicap_bool'] = df['handicap'].map(mapping)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We verify"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patient_id</th>\n",
       "      <th>appointment_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>scheduled_day</th>\n",
       "      <th>appointment_day</th>\n",
       "      <th>age</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>scholarship</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>alcoholism</th>\n",
       "      <th>handicap</th>\n",
       "      <th>sms_received</th>\n",
       "      <th>no_show</th>\n",
       "      <th>day_of_appointment</th>\n",
       "      <th>sch_days_inadv</th>\n",
       "      <th>sch_sameday</th>\n",
       "      <th>gender_is_woman</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>handicap_bool</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>False</th>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "      <td>108281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "      <td>2235</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               patient_id  appointment_id  gender  scheduled_day  \\\n",
       "handicap_bool                                                      \n",
       "False              108281          108281  108281         108281   \n",
       "True                 2235            2235    2235           2235   \n",
       "\n",
       "               appointment_day     age  neighborhood  scholarship  \\\n",
       "handicap_bool                                                       \n",
       "False                   108281  108281        108281       108281   \n",
       "True                      2235    2235          2235         2235   \n",
       "\n",
       "               hypertension  diabetes  alcoholism  handicap  sms_received  \\\n",
       "handicap_bool                                                               \n",
       "False                108281    108281      108281    108281        108281   \n",
       "True                   2235      2235        2235      2235          2235   \n",
       "\n",
       "               no_show  day_of_appointment  sch_days_inadv  sch_sameday  \\\n",
       "handicap_bool                                                             \n",
       "False           108281              108281          108281       108281   \n",
       "True              2235                2235            2235         2235   \n",
       "\n",
       "               gender_is_woman  \n",
       "handicap_bool                   \n",
       "False                   108281  \n",
       "True                      2235  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('handicap_bool').count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Handicap_bool does indeed contain boolean values now. Around 2 % of patients have one or more handicaps."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That concludes our data wrangling."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='eda'></a>\n",
    "## Exploratory Data Analysis\n",
    "\n",
    "As we perform our exploratory data analysis we will compute statistics and create visualizations with the goal of addressing the research questions that we posed in the Introduction. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, let us look at some histograms and other plots which will indicate the distribution of our variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>110516.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>37.085861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>23.104465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>18.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>37.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>55.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>102.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 age\n",
       "count  110516.000000\n",
       "mean       37.085861\n",
       "std        23.104465\n",
       "min         0.000000\n",
       "25%        18.000000\n",
       "50%        37.000000\n",
       "75%        55.000000\n",
       "max       102.000000"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = df['age'].hist()\n",
    "ax.set_ylabel('Number of patients')\n",
    "ax.set_xlabel('Age')\n",
    "ax.set_title('Distribution of patients by age')\n",
    "pd.DataFrame(df['age'].describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From histogram for the 'age' variable we see that there is a high count of patients 0-10 years old. Not surprising as babies are in this group and might need vaccination etc. Then it seems people a healthy as teenagers and you adults. Then it increases gradually till they are around 60 years old. Naturally, after this that are fewer and fewer patients, as we move towards old age, and an increasing number of potential patients will no longer be among the living."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us now explore the gender distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>0.64996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>M</th>\n",
       "      <td>0.35004</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    gender\n",
       "F  0.64996\n",
       "M  0.35004"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = df['gender'].value_counts().plot(kind='pie')\n",
    "ax.set_title('Distribution of patients by gender')\n",
    "pd.DataFrame(df['gender'].value_counts()/df['gender'].value_counts().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the 'gender' variable, here in a pie chart, it is clear that we have more female patients than male; almost 2:1."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we explore 'scholarship', which indicates whether the patient were part of the welfare program"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>scholarship</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>False</th>\n",
       "      <td>0.901725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <td>0.098275</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       scholarship\n",
       "False     0.901725\n",
       "True      0.098275"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = df['scholarship'].value_counts().plot(kind='pie')\n",
    "ax.set_title('Distribution of patients by scholarship')\n",
    "pd.DataFrame(df['scholarship'].value_counts()/df['scholarship'].value_counts().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "About 10 % of patients do have scholarship."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we look at the variable 'hypertension'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hypertension</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>False</th>\n",
       "      <td>0.802743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <td>0.197257</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       hypertension\n",
       "False      0.802743\n",
       "True       0.197257"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = df['hypertension'].value_counts().plot(kind='pie')\n",
    "ax.set_title('Distribution of patients by hypertension')\n",
    "pd.DataFrame(df['hypertension'].value_counts()/df['hypertension'].value_counts().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Around 20 % of patient suffer from hypertension."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we look at the variable 'diabetes'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>diabetes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>False</th>\n",
       "      <td>0.928128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <td>0.071872</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       diabetes\n",
       "False  0.928128\n",
       "True   0.071872"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = df['diabetes'].value_counts().plot(kind='pie')\n",
    "ax.set_title('Distribution of patients by diabetes')\n",
    "pd.DataFrame(df['diabetes'].value_counts()/df['diabetes'].value_counts().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Around 7 % of patients suffer from diabetes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we look at the variable 'alcoholism', ie. whether a patient suffer from alcoholism"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alcoholism</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>False</th>\n",
       "      <td>0.969597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <td>0.030403</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       alcoholism\n",
       "False    0.969597\n",
       "True     0.030403"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = df['alcoholism'].value_counts().plot(kind='pie')\n",
    "ax.set_title('Distribution of patients by alcoholism')\n",
    "pd.DataFrame(df['alcoholism'].value_counts()/df['alcoholism'].value_counts().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Only 3 % of patients suffer from alcoholism."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we look at the variable 'handicap'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>handicap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.979777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.018423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.001656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.000118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000027</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   handicap\n",
       "0  0.979777\n",
       "1  0.018423\n",
       "2  0.001656\n",
       "3  0.000118\n",
       "4  0.000027"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = df['handicap'].value_counts().plot(kind='bar')\n",
    "ax.set_title('Distribution of patients by number of handicaps')\n",
    "pd.DataFrame(df['handicap'].value_counts()/df['handicap'].value_counts().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "98 % of patients do not have any handicap, while 1.8 % have one handicap, 0.17 % have two handicaps, 0.012 % have three handicaps and 0.0027 % have four handicaps."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, let is look at the variable 'no_show'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>no_show</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>False</th>\n",
       "      <td>0.79812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <td>0.20188</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       no_show\n",
       "False  0.79812\n",
       "True   0.20188"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = df['no_show'].value_counts().plot(kind='pie')\n",
    "ax.set_title('Distribution of patients by no-show')\n",
    "pd.DataFrame(df['no_show'].value_counts()/df['no_show'].value_counts().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "20.2 % of patients misses their appointment."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have some general overview, we will explore the \"no-shows\" further and look into what factors might affect whether a patient misses the appointment. To do this, we start by creating a DataFrame 'df_noshow', which contains only the subset of no-shows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_noshow = df[df['no_show'] == True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22311"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = df_noshow.shape[0]\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "110516"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = df.shape[0]\n",
    "y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "'df_noshow' contains 22,311 rows of data, while 'df' has 110,516,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Overall fraction of no-shows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20.2%\n"
     ]
    }
   ],
   "source": [
    "no_show_frac = x/y\n",
    "\n",
    "print(f\"{no_show_frac:.1%}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This verifies what we found from the full dataset and the value_counts() function earlier: That the overall fraction of \"no-shows\" is 20.2 %."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we will find the fraction of no-shows among patients *given* that a certain factor is true.\n",
    "\n",
    "For this we will loop through our list of 'bool_factors' names and create a list of corresponing values, 'bool_factors_noshow_frac'. We will print the values too.\n",
    "\n",
    "Finally we will zip our lists together as a dictionary, 'dict_noshow'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Fraction of no-shows given gender_is_woman:\n",
      "20.3%\n",
      "\n",
      "Fraction of no-shows given scholarship:\n",
      "23.7%\n",
      "\n",
      "Fraction of no-shows given hypertension:\n",
      "17.3%\n",
      "\n",
      "Fraction of no-shows given diabetes:\n",
      "18.0%\n",
      "\n",
      "Fraction of no-shows given alcoholism:\n",
      "20.1%\n",
      "\n",
      "Fraction of no-shows given handicap_bool:\n",
      "18.0%\n",
      "\n",
      "Fraction of no-shows given sms_received:\n",
      "27.6%\n",
      "\n",
      "Fraction of no-shows given sch_sameday:\n",
      "4.6%\n"
     ]
    }
   ],
   "source": [
    "bool_factors = ['gender_is_woman', 'scholarship', 'hypertension', 'diabetes', 'alcoholism', 'handicap_bool', 'sms_received', 'sch_sameday']\n",
    "\n",
    "bool_factors_noshow_frac = []\n",
    "\n",
    "for factor in bool_factors:\n",
    "    # Creating DataFrame 'df_factor' where given factor is true\n",
    "    df_factor = df[df[factor] == True]\n",
    "    \n",
    "    # Counting the number of no-shows in 'df_factor'\n",
    "    a = df_factor[df_factor['no_show'] == True].count()[0]\n",
    "    \n",
    "    # Counting the total number of rows in 'df_factor'\n",
    "    b = df_factor.shape[0]\n",
    "    \n",
    "    # Calculating the no-show ratio and appending it to our list of values\n",
    "    no_show_frac_factor = a / b\n",
    "    no_show_frac_factor\n",
    "    bool_factors_noshow_frac.append(no_show_frac_factor)\n",
    "    \n",
    "    # Printing the no-show ratio for given factor\n",
    "    print(\"\\nFraction of no-shows given \" + factor + \":\")\n",
    "    print(f\"{no_show_frac_factor:.1%}\")\n",
    "\n",
    "# Zipping our lists together as a dictionary\n",
    "dict_noshow = dict(zip(bool_factors, bool_factors_noshow_frac))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compared to the full dataset, where the no-show ratio was 20.2 %, we see that only the subsets of 'scholarship' and 'sms_received' have a higher ratio. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We verify that our dictionary contains keys and values as expected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'gender_is_woman': 0.203087803316117,\n",
       " 'scholarship': 0.2373630420771568,\n",
       " 'hypertension': 0.1730275229357798,\n",
       " 'diabetes': 0.18003273322422259,\n",
       " 'alcoholism': 0.20148809523809524,\n",
       " 'handicap_bool': 0.17986577181208055,\n",
       " 'sms_received': 0.27575322003325725,\n",
       " 'sch_sameday': 0.04647182386348902}"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dict_noshow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Indeed it does."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Research Question 1: What factors are important for us to know in order to predict if a patient will show up for their scheduled appointment? (And does sms-reminders work?)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will create a plot of normalized no-show ratios to address this question."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We create lists for keys and values respectively from our dictionary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "no_show_keys = list(dict_noshow.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "no_show_values = np.asarray(list(dict_noshow.values()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To be able to compare, we normalize the values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.00598143, 1.17576146, 0.8570799 , 0.89177973, 0.99805739,\n",
       "       0.8909527 , 1.36592456, 0.23019497])"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no_show_values_norm = no_show_values/no_show_frac\n",
    "no_show_values_norm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: Normalized values close to 1 means small deviation from the overall no-show ratio of the full dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we subtract 1 and take the absolute value to be able to rank by degree of deviation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.00598143, 0.17576146, 0.1429201 , 0.10822027, 0.00194261,\n",
       "       0.1090473 , 0.36592456, 0.76980503])"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no_show_values_abs_rel_diff = np.absolute(no_show_values_norm - 1)\n",
    "no_show_values_abs_rel_diff"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We create a pandas DataFrame and display it ranked by absolute relative difference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Variable</th>\n",
       "      <th>No-show ratio normalized</th>\n",
       "      <th>Absolute relative diff (desc)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>sch_sameday</td>\n",
       "      <td>0.230195</td>\n",
       "      <td>0.769805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>sms_received</td>\n",
       "      <td>1.365925</td>\n",
       "      <td>0.365925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>scholarship</td>\n",
       "      <td>1.175761</td>\n",
       "      <td>0.175761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>hypertension</td>\n",
       "      <td>0.857080</td>\n",
       "      <td>0.142920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>handicap_bool</td>\n",
       "      <td>0.890953</td>\n",
       "      <td>0.109047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>diabetes</td>\n",
       "      <td>0.891780</td>\n",
       "      <td>0.108220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>gender_is_woman</td>\n",
       "      <td>1.005981</td>\n",
       "      <td>0.005981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>alcoholism</td>\n",
       "      <td>0.998057</td>\n",
       "      <td>0.001943</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Variable  No-show ratio normalized  Absolute relative diff (desc)\n",
       "7      sch_sameday                  0.230195                       0.769805\n",
       "6     sms_received                  1.365925                       0.365925\n",
       "1      scholarship                  1.175761                       0.175761\n",
       "2     hypertension                  0.857080                       0.142920\n",
       "5    handicap_bool                  0.890953                       0.109047\n",
       "3         diabetes                  0.891780                       0.108220\n",
       "0  gender_is_woman                  1.005981                       0.005981\n",
       "4       alcoholism                  0.998057                       0.001943"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = list(zip(no_show_keys, no_show_values_norm, no_show_values_abs_rel_diff))\n",
    "  \n",
    "df_table = pd.DataFrame(data, columns = ['Variable', 'No-show ratio normalized', 'Absolute relative diff (desc)']) \n",
    "\n",
    "df_table.sort_values(by=['Absolute relative diff (desc)'], ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we use the normalized values to create a bar plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1008x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pos = np.arange(len(no_show_keys))\n",
    "\n",
    "plt.subplots(figsize=(14,8))\n",
    "plt.bar(y_pos, no_show_values_norm, align='center', alpha=0.5)\n",
    "plt.xticks(y_pos, no_show_keys)\n",
    "plt.ylabel('Fraction of no-shows (normalized)')\n",
    "plt.title('Plot 1: Fraction of no-shows normalized for various factors')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the ranked table above and our plot - the most important factor to predict if a patient will show up, by far, seems to be whether the appointment was scheduled on the same day. The ratio of no-shows is only 4.6 % in this subset, which is 77 % less than in the full dataset. So, in this group 95.4 % did show up.\n",
    "\n",
    "Among the deceases *hypertension* seems to be the most important factor. Patients who have hypertension are less likely to miss their appointment. The ratio of no-shows is 17.3 % in this subset, which is 14 % less than in the full dataset.\n",
    "\n",
    "Having received SMS reminder, perhaps surprisingly, actually increases the ratio of no-shows. The ratio of no-shows is 27.6 % in this subset, which is 37 % more than in the full dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Research Question 2: Is there any correlation between age of the patient and how far ahead the appointment was scheduled?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To address this question, we do a scatter plot of the 'age' variable versus the 'sch_days_inadv' variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x=\"age\", y=\"sch_days_inadv\", data=df);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There does not seem to be any correlation between age of the patient and the number of days in advance the appointment was scheduled. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Research Question 3: Is there a day of the week when the age distribution of the patients is different?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us use a boxplot for this, where we take a look at the distribution of age for each day."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Age-wise distribution by day of week')"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.boxplot(x=\"day_of_appointment\", y=\"age\", data=df, order=[\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"])\n",
    "ax.set_ylabel('Age')\n",
    "ax.set_xlabel('Day')\n",
    "ax.set_title('Age-wise distribution by day of week')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is a deviation: For Saturday the average age is higher and the upper quartile is more narrow. Also, the range is smaller. But how common is it to have a medical appointment on a Saturday? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "39"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_saturday = df[df[\"day_of_appointment\"] == \"Saturday\"]\n",
    "df_saturday.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Right. There are very few Saturday appointments. Only 39. Then we cannot say with confidence that we think the distribution is different. \n",
    "\n",
    "Are Saturday appointments limited to a single neighborhood? (ie. one hospital)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patient_id</th>\n",
       "      <th>appointment_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>scheduled_day</th>\n",
       "      <th>appointment_day</th>\n",
       "      <th>age</th>\n",
       "      <th>scholarship</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>alcoholism</th>\n",
       "      <th>handicap</th>\n",
       "      <th>sms_received</th>\n",
       "      <th>no_show</th>\n",
       "      <th>day_of_appointment</th>\n",
       "      <th>sch_days_inadv</th>\n",
       "      <th>sch_sameday</th>\n",
       "      <th>gender_is_woman</th>\n",
       "      <th>handicap_bool</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighborhood</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ARIOVALDO FAVALESSA</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CARATOÍRA</th>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DO QUADRO</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SANTO ANTÔNIO</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     patient_id  appointment_id  gender  scheduled_day  \\\n",
       "neighborhood                                                             \n",
       "ARIOVALDO FAVALESSA           5               5       5              5   \n",
       "CARATOÍRA                    30              30      30             30   \n",
       "DO QUADRO                     1               1       1              1   \n",
       "SANTO ANTÔNIO                 3               3       3              3   \n",
       "\n",
       "                     appointment_day  age  scholarship  hypertension  \\\n",
       "neighborhood                                                           \n",
       "ARIOVALDO FAVALESSA                5    5            5             5   \n",
       "CARATOÍRA                         30   30           30            30   \n",
       "DO QUADRO                          1    1            1             1   \n",
       "SANTO ANTÔNIO                      3    3            3             3   \n",
       "\n",
       "                     diabetes  alcoholism  handicap  sms_received  no_show  \\\n",
       "neighborhood                                                                 \n",
       "ARIOVALDO FAVALESSA         5           5         5             5        5   \n",
       "CARATOÍRA                  30          30        30            30       30   \n",
       "DO QUADRO                   1           1         1             1        1   \n",
       "SANTO ANTÔNIO               3           3         3             3        3   \n",
       "\n",
       "                     day_of_appointment  sch_days_inadv  sch_sameday  \\\n",
       "neighborhood                                                           \n",
       "ARIOVALDO FAVALESSA                   5               5            5   \n",
       "CARATOÍRA                            30              30           30   \n",
       "DO QUADRO                             1               1            1   \n",
       "SANTO ANTÔNIO                         3               3            3   \n",
       "\n",
       "                     gender_is_woman  handicap_bool  \n",
       "neighborhood                                         \n",
       "ARIOVALDO FAVALESSA                5              5  \n",
       "CARATOÍRA                         30             30  \n",
       "DO QUADRO                          1              1  \n",
       "SANTO ANTÔNIO                      3              3  "
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_saturday.groupby(\"neighborhood\").count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Occurences of Saturday appointments is limited to 4 neighborhoods (out of 81).\n",
    "And 30 out of 39 such appointments were located at the local hospital of the Caratoira neighborhood.\n",
    "\n",
    "Although we cannot claim with any strong belief that the age distribution is different on Saturdays, we cannot rule it out either. Perhaps the hospital of the Caratoira could provide more information for anyone who wants to find out the truth about this. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
